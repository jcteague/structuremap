<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
	<head>
		<title>Using Attributes</title>
		<link rel="stylesheet" type="text/css" href="style.css" />
		<script type="text/javascript" src="jquery-1.2.6.js"></script>
		<script type="text/javascript" src="structuremap.js"></script>
	</head>
	<body>

					<p>To some degree, StructureMap can be configured through 
					the optional usage of attributes instead of the Xml 
					configuration.&nbsp; Choosing attributes over Xml 
					configuration is partially a choice of preference.&nbsp; 
					    Before the existence of the Registry DSL, using attributes made the StructureMap configuration 
					more resilient to refactorings when configured classes were 
					renamed or moved into different namespaces or assemblies.&nbsp; At this point, the 
                        advantages of using attributres are largely gone.</p>
                    <h2>Scanning for Classes marked with Attributes</h2>
                    <p>In order to pick up the attributes and add the marked interfaces and classes to 
                        the container, StructureMap has to be directed to &quot;scan&quot; one or more assemblies 
                        with the Scan() method.</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;\red0\green128\blue0;\red163\green21\blue21;}??\fs20     \cf3 public\cf0  \cf3 class\cf0  \cf4 ScanningRegistry\cf0  : \cf4 Registry\par ??\cf0     \{\par ??        \cf3 public\cf0  ScanningRegistry()\par ??        \{\par ??            Scan(x =&gt;\par ??            \{\par ??                \cf5 // Add assembly by name.\par ??\cf0                 x.Assembly(\cf6 "StructureMap.Testing.Widget"\cf0 );\par ??\par ??                \cf5 // Add an assembly directly\par ??\cf0                 x.Assembly(\cf4 Assembly\cf0 .GetExecutingAssembly());\par ??\par ??                \cf5 // Add the assembly that contains a certain type\par ??\cf0                 x.AssemblyContainingType&lt;\cf4 IService\cf0 &gt;();\par ??                \cf5 // or\par ??\cf0                 x.AssemblyContainingType(\cf3 typeof\cf0 (\cf4 IService\cf0 ));\par ??            \});\par ??\par ??\par ??\par ??            Scan(x =&gt;\par ??            \{\par ??                \cf5 // I'm telling StructureMap to sweep a folder called "Extensions" directly\par ??\cf0                 \cf5 // underneath the application root folder for any assemblies\par ??\cf0                 x.AssembliesFromPath(\cf6 "Extensions"\cf0 );\par ??\par ??                \cf5 // I also direct StructureMap to add any Registries that it finds in these\par ??\cf0                 \cf5 // assemblies.  I'm assuming that all the StructureMap directives are\par ??\cf0                 \cf5 // contained in Registry classes -- and this is the recommended approach\par ??\cf0                 x.LookForRegistries();\par ??            \});\par ??\par ??            Scan(x =&gt;\par ??            \{\par ??                \cf5 // This time I'm going to specify a filter on the assembly such that \par ??\cf0                 \cf5 // only assemblies that have "Extension" in their name will be scanned\par ??\cf0                 x.AssembliesFromPath(\cf6 "Extensions"\cf0 , assembly =&gt; assembly.GetName().Name.Contains(\cf6 "Extension"\cf0 ));\par ??\par ??                x.LookForRegistries();\par ??            \});\par ??\par ??\par ??            \cf5 // Adding configuration from an extension Assembly\par ??\cf0             \cf5 // after ObjectFactory is already configured\par ??\cf0             \cf4 ObjectFactory\cf0 .Configure(x =&gt;\par ??            \{\par ??                x.Scan(scan =&gt;\par ??                \{\par ??                    scan.Assembly(\cf6 "MyCompany.MyApp.ExtensionAssembly"\cf0 );\par ??                    scan.LookForRegistries();\par ??                \});\par ??            \});\par ??        \}\par ??    \}}
-->
                    <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
                        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">class</span>
                            <span style="color: #2b91af;">ScanningRegistry</span> :
                            <span style="color: #2b91af;">Registry</span></p>
                        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; {</p>
                        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> ScanningRegistry()</p>
                        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
                        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Scan(x =&gt;</p>
                        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
                        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x.Assembly(<span 
                                style="color: #a31515;">&quot;StructureMap.Testing.Widget&quot;</span>);</p>
                        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
                        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
                        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; }</p>
                    </div>
<!--EndFragment-->
<p>See &quot;<a href="ScanningAssemblies.htm">Scanning Assemblies</a>&quot; for more 
    information.</p>
                    <hr />
					<h2>[DefaultConstructor] Attribute</h2>
					<p>The [DefaultConstructor] attribute overrides StructureMap 
					to use a particular constructor function to instantiate a 
					concrete class. </p>
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border-top: windowtext 1pt solid; padding-top: 0pt; border-left: windowtext 1pt solid; padding-left: 0pt; border-right: windowtext 1pt solid; padding-right: 0pt; border-bottom: windowtext 1pt solid; padding-bottom: 0pt;">
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; [AttributeUsage(AttributeTargets.Constructor)]</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">class</span> DefaultConstructorAttribute : Attribute</pre>
</div>
<p>Without using the [DefaultConstructor] attribute StructureMap will look for the
    <a href="ConstructorAndSetterInjection.htm#ctor">greediest constructor function</a>.</p>
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border-top: windowtext 1pt solid; padding-top: 0pt; border-left: windowtext 1pt solid; padding-left: 0pt; border-right: windowtext 1pt solid; padding-right: 0pt; border-bottom: windowtext 1pt solid; padding-bottom: 0pt;">
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: green;">// Force StructureMap to create this class with this constructor</span></pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [DefaultConstructor]</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> ProblemView() : <span style="color: blue;">this</span>(<span style="color: blue;">false</span>)</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre>
<pre style="margin: 0px;">&nbsp;</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre>
<pre style="margin: 0px;">&nbsp;</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> ProblemView(<span style="color: blue;">bool</span> showPath)</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; _showPath = showPath;</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre>
</div>
					<p>Note:&nbsp; As of StructureMap 2.5.2, there is also a programmatic way to select 
                        constructor functions in the Registry DSL without having to resort to 
                        attributes.</p>
                    <hr />
                    <h2>[PluginFamily] Attribute</h2>
					<p>The [PluginFamily]&nbsp;attribute directs StructureMap to register a new PluginType for the decorated type.&nbsp; It is a 
					shorthand for the &lt;PluginFamily&gt; node in the Xml 
					configuration.&nbsp; Note that the Xml configuration will 
					override the attribute if both exist for the same CLR type.&nbsp; 
					The PluginFamily attribute can be used to define any 
					combination of the default instance key, the MementoSource, 
					and the request scope.&nbsp; [PluginFamily] can be used on 
					any interface, abstract, or concrete class.</p>
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border-top: windowtext 1pt solid; padding-top: 0pt; border-left: windowtext 1pt solid; padding-left: 0pt; border-right: windowtext 1pt solid; padding-right: 0pt; border-bottom: windowtext 1pt solid; padding-bottom: 0pt;">
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">class</span> PluginFamilyAttribute : Attribute</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; {</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">private</span> <span style="color: blue;">string</span> _default = <span style="color: blue;">string</span>.Empty;</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">private</span> Type _source = <span style="color: blue;">null</span>;</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">private</span> InstanceScope _scope = InstanceScope.PerRequest;</pre>
<pre style="margin: 0px;">&nbsp;</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> PluginFamilyAttribute()</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre>
<pre style="margin: 0px;">&nbsp;</pre>
<pre style="margin: 0px;">&nbsp;</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> PluginFamilyAttribute(<span style="color: blue;">string</span> DefaultKey)</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; _default = DefaultKey;</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre>
<pre style="margin: 0px;">&nbsp;</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;summary&gt;</span></pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> If set, determines the shared "scope" of the instance -- PerRequest, Singleton, ThreadLocal,</span></pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> HttpContext, etc.</span></pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;/summary&gt;</span></pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> InstanceScope Scope</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">get</span> { <span style="color: blue;">return</span> _scope; }</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">set</span> { _scope = <span style="color: blue;">value</span>; }</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre>
<pre style="margin: 0px;">&nbsp;</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;summary&gt;</span></pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> If set, </span><span style="color: #008000">specifies the MementoSource for the PluginFamily</span></pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;/summary&gt;</span></pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> Type SourceType</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">get</span> { <span style="color: blue;">return</span> _source; }</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">set</span> { _source = <span style="color: blue;">value</span>; }</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre>
<pre style="margin: 0px;">&nbsp;</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;summary&gt;</span></pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> Declares the target to be built by StructureMap as a Singleton.&nbsp; One object instance will</span></pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> be created for each named instance.  Equivalent to saying Scope = InstanceScope.Singleton</span></pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;/summary&gt;</span></pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">bool</span> IsSingleton</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">get</span></pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">return</span> _scope == InstanceScope.Singleton;</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">set</span></pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; _scope = <span style="color: blue;">value</span> ? InstanceScope.Singleton : InstanceScope.PerRequest;</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; }</pre>
</div>
<p>Here are some sample usages:</p>

<div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border-top: windowtext 1pt solid; padding-top: 0pt; border-left: windowtext 1pt solid; padding-left: 0pt; border-right: windowtext 1pt solid; padding-right: 0pt; border-bottom: windowtext 1pt solid; padding-bottom: 0pt;">
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; [PluginFamily]</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">interface</span> IExpirationPolicy</pre>
</div>
<br><br>
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border-top: windowtext 1pt solid; padding-top: 0pt; border-left: windowtext 1pt solid; padding-left: 0pt; border-right: windowtext 1pt solid; padding-right: 0pt; border-bottom: windowtext 1pt solid; padding-bottom: 0pt;">
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;summary&gt;</span></pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> Directs StructureMap to use an instance of HTMLSourceMementoSource for the </span></pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> MementoSource.&nbsp; Note that the MementoSource specified has to have a</span></pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> no argument constructor</span></pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;/summary&gt;</span></pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; [PluginFamily(SourceType = <span style="color: blue;">typeof</span>(HTMLSourceMementoSource))]</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">interface</span> IHTMLSource</pre>
</div>
<br><br>
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border-top: windowtext 1pt solid; padding-top: 0pt; border-left: windowtext 1pt solid; padding-left: 0pt; border-right: windowtext 1pt solid; padding-right: 0pt; border-bottom: windowtext 1pt solid; padding-bottom: 0pt;">
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; [PluginFamily(Scope = InstanceScope.HttpContext)]</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">interface</span> ImplicitFamilyTarget{}</pre>
</div>
<br><br>
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border-top: windowtext 1pt solid; padding-top: 0pt; border-left: windowtext 1pt solid; padding-left: 0pt; border-right: windowtext 1pt solid; padding-right: 0pt; border-bottom: windowtext 1pt solid; padding-bottom: 0pt;">
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;summary&gt;</span></pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> Specifying the default instance is "Default" and marking the PluginFamily</span></pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> as an injected Singleton</span></pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;/summary&gt;</span></pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; [PluginFamily("Default", IsSingleton = <span style="color: blue;">true</span>)]</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">interface</span> ISingletonRepository</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; {</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; }</pre>
</div>

                    <hr />
                    <h2>[Pluggable] Attribute</h2>
<p>When a concrete class is decorated with the [Pluggable] attribute it directs 
StructureMap to create a <a href="Basic%20Architecture.htm#Plugin">Plugin</a> for 
    the concrete type.&nbsp; StructureMap will &quot;plug&quot; this concrete class into any 
    PluginType where the &quot;Pluggable&quot; class is assignable to the &quot;PluginType&quot; class</p>
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border-top: windowtext 1pt solid; padding-top: 0pt; border-left: windowtext 1pt solid; padding-left: 0pt; border-right: windowtext 1pt solid; padding-right: 0pt; border-bottom: windowtext 1pt solid; padding-bottom: 0pt;">
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;summary&gt;</span></pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> Used to implicitly mark a class as a Plugin candidate for StructureMap</span></pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span style="color: green;"> </span><span style="color: gray;">&lt;/summary&gt;</span></pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; [AttributeUsage(AttributeTargets.Class)]</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">class</span> PluggableAttribute : Attribute</pre>
</div>
<p>The "Concrete Key" property is required.</p>
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border-top: windowtext 1pt solid; padding-top: 0pt; border-left: windowtext 1pt solid; padding-left: 0pt; border-right: windowtext 1pt solid; padding-right: 0pt; border-bottom: windowtext 1pt solid; padding-bottom: 0pt;">
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; [Pluggable("AbsoluteTime")]</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">class</span> AbsoluteTimeExpirationPolicy : IExpirationPolicy</pre>
</div>


					<p>If StructureMap controls the construction of all of the 
					constructor argument types of a Plugin class or the 
					constructor has no arguments, the concrete key specified by 
					[Pluggable(&quot;SomeKey&quot;)] is also the instance key.&nbsp; </p>
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border-top: windowtext 1pt solid; padding-top: 0pt; border-left: windowtext 1pt solid; padding-left: 0pt; border-right: windowtext 1pt solid; padding-right: 0pt; border-bottom: windowtext 1pt solid; padding-bottom: 0pt;">
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; [Pluggable("Singleton")]</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">class</span> SingletonInterceptor : CacheInterceptor</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; {</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">private</span> IDictionary _instances;</pre>
<pre style="margin: 0px;">&nbsp;</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [DefaultConstructor]</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> SingletonInterceptor() : <span style="color: blue;">this</span>(<span style="color: blue;">new</span> Hashtable())</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre>
<pre style="margin: 0px;">&nbsp;</pre>
<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre>
</div>

					<p>In this case, you could retrieve an instance of 
					SingletonInterceptor by calling <font face="Courier New">
					ObjectFactory.GetNamedInstance(typeof(InstanceFactoryInterceptor), 
					&quot;Singleton&quot;)</font>.</p>
					<hr />
					
					
					<h2>[SetterProperty] Attribute</h2>
					<p>StructureMap provides support for 
					<a href="ConstructorAndSetterInjection.htm">Setter Injection</a>.&nbsp; All properties 
                        marked with the [SetterProperty] attribute are mandatory and 
					StructureMap will fail if it cannot find a value for the 
					property at the time of object creation.&nbsp; </p>
					<div style="font-family: Courier New; font-size: 10pt; color: black; border: 1pt solid windowtext; padding: 0pt; background: white">
						<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [SetterProperty]</pre>
						<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> IWidget Widget</pre>
						<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre>
						<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">get</span> { <span style="color: blue;">return</span> _widget; }</pre>
						<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">set</span> { _widget = <span style="color: blue;">value</span>; }</pre>
						<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre>
						<pre style="margin: 0px;">&nbsp;</pre>
						<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [SetterProperty]</pre>
						<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> FontStyleEnum FontStyle</pre>
						<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre>
						<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">get</span> { <span style="color: blue;">return</span> _fontStyle; }</pre>
						<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">set</span> { _fontStyle = <span style="color: blue;">value</span>; }</pre>
						<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre>
						<pre style="margin: 0px;">&nbsp;</pre>
						<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [SetterProperty]</pre>
						<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">string</span> ColumnName</pre>
						<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre>
						<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">get</span> { <span style="color: blue;">return</span> _columnName; }</pre>
						<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">set</span> { _columnName = <span style="color: blue;">value</span>; }</pre>
						<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre>
						<pre style="margin: 0px;">&nbsp;</pre>
						<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; [SetterProperty]</pre>
						<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> Rule[] Rules</pre>
						<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {</pre>
						<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">get</span> { <span style="color: blue;">return</span> _rules; }</pre>
						<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">set</span> { _rules = <span style="color: blue;">value</span>; }</pre>
						<pre style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }</pre>
					</div>
<!--EndFragment-->
<hr />
<h2>[ValidationMethod] Attribute</h2>
<p>See Environment Tests in <a href="Diagnostics.htm">Diagnostics</a></p>


	</body>
</html>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
	<head>
		<title>Auto Mocking Container with StructureMap</title>
		<link rel="stylesheet" type="text/css" href="style.css" />
		<script type="text/javascript" src="jquery-1.2.6.js"></script>
		<script type="text/javascript" src="structuremap.js"></script>
	</head>
	<body>
	    <p>StructureMap includes an
            <a href="http://blog.eleutian.com/CommentView,guid,762249da-e25a-4503-8f20-c6d59b1a69bc.aspx">
            Auto Mocking Container</a> (a couple actually).&nbsp; If you&#39;re not familiar 
            with the concept, an Auto Mocking Container repurposes an IoC container to 
            automate the creation and attachment of mock objects to a concrete class within 
            unit tests.&nbsp; The key fact about any auto mocking container is that it 
            reduces the mechanical cost of creating
            <a href="http://codebetter.com/blogs/jeremy.miller/pages/129544.aspx">
            interaction tests</a> by obviating the need to create mock objects by hand, 
            track those mock objects in the test, and apply the mocks to a concrete class.&nbsp; 
            Out of the box, StructureMap includes the RhinoAutoMocker for
            <a href="http://ayende.com/projects/rhino-mocks.aspx">RhinoMocks</a> and 
            MoqAutoMocker for <a href="http://code.google.com/p/moq/">Moq</a>.&nbsp; The 
            Auto Mocking support is in the StructureMap.AutoMocking.dll.</p>
        <p>&nbsp;</p>
	    
	    <h2>How it Works</h2>
	    <p>Let&#39;s start with an example from the unit tests.&nbsp; Let&#39;s say that you have a 
            class named &quot;ConcreteClass&quot; that uses three other types of services to perform 
            its responsibilities.</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;}??\fs20             \cf3 public\cf0  ConcreteClass(\cf4 IMockedService\cf0  service, \cf4 IMockedService2\cf0  service2, \cf4 IMockedService3\cf0  service3)\par ??            \{\par ??                _service = service;\par ??                _service2 = service2;\par ??                _service3 = service3;\par ??            \}}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">
                public</span> ConcreteClass(<span style="color: #2b91af;">IMockedService</span> 
                service, <span style="color: #2b91af;">IMockedService2</span> service2,
                <span style="color: #2b91af;">IMockedService3</span> service3)</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                _service = service;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                _service2 = service2;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                _service3 = service3;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
        </div>
<!--EndFragment-->
<p>Traditionally, I might write integration tests against ConcreteClass by creating 
    a different mock object for each service dependency, attach each in the 
    constructor function of ConcreteClass, and probably track each mock object in a 
    field of the unit test fixture.&nbsp; With the auto mocking container, it&#39;s 
    simpler:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green128\blue0;\red0\green0\blue255;\red43\green145\blue175;}??\fs20             \cf3 // This sets up a Rhino Auto Mocker in the Arrange, Act, Assert mode\par ??\cf0             \cf4 var\cf0  autoMocker = \cf4 new\cf0  \cf5 RhinoAutoMocker\cf0 &lt;\cf5 ConcreteClass\cf0 &gt;(\cf5 MockMode\cf0 .AAA);}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">
                // This sets up a Rhino Auto Mocker in the Arrange, Act, Assert mode</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">
                var</span> autoMocker = <span style="color: blue;">new</span>
                <span style="color: #2b91af;">RhinoAutoMocker</span>&lt;<span 
                    style="color: #2b91af;">ConcreteClass</span>&gt;(<span style="color: #2b91af;">MockMode</span>.AAA);</p>
        </div>
<!--EndFragment-->
<p>That&#39;s the entire mock object setup.&nbsp; To get an instance of the 
    ConcreteClass inside the unit test you access the ClassUnderTest property of the 
    auto mocker:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green128\blue0;\red43\green145\blue175;}??\fs20             \cf3 // Act in the test\par ??\cf0             \cf4 ConcreteClass\cf0  @class = autoMocker.ClassUnderTest;\par ??            @class.CallService();}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">
                // Act in the test</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">
                ConcreteClass</span> @class = autoMocker.ClassUnderTest;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @class.CallService();</p>
        </div>
<!--EndFragment-->
<p>At the first call to the RhinoAutoMocker.ClassUnderTest, the RhinoAutoMocker:</p>
        <ol>
            <li>&nbsp;Looked at ConcreteClass</li>
            <li>Saw that the greediest constructor required instances of three different 
                dependencies</li>
            <li>Created mock objects using the RhinoMocks MockRepository.CreateMock&lt;T&gt;() method 
                for each type of dependency</li>
            <li>Then called the constructor function of ConcreteClass to build a new instance</li>
        </ol>
        <p>
            ClassUnderTest is created upon demand.&nbsp; Likewise, you can access the actual 
            mock objects either to set expectations before ClassUnderTest is created, or to 
            assert method calls after the action.&nbsp; Use the Get&lt;T&gt;() method to access 
            the mock objects per type that will be used in the test:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green128\blue0;\red43\green145\blue175;}??\fs20             \cf3 // This retrieves the mock object for IMockedService\par ??\cf0             autoMocker.Get&lt;\cf4 IMockedService\cf0 &gt;().AssertWasCalled(s =&gt; s.Go());}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">
                // This retrieves the mock object for IMockedService</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; autoMocker.Get&lt;<span 
                    style="color: #2b91af;">IMockedService</span>&gt;().AssertWasCalled(s =&gt; 
                s.Go());</p>
        </div>
<!--EndFragment-->
<hr />
	    
	    <h2>How it uses Mock Engines</h2>
	    <p>If you wanted to use the AutoMocker with another type of Mock Object Library, you 
            can simply use the AutoMocker&lt;CLASSUNDERTEST&gt; class, but feed it an 
            implementation of this interface that works with the mock object library of your 
            choice:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;}??\fs20     \cf3 public\cf0  \cf3 interface\cf0  \cf4 ServiceLocator\par ??\cf0     \{\par ??        T Service&lt;T&gt;() \cf3 where\cf0  T : \cf3 class\cf0 ;\par ??        \cf3 object\cf0  Service(\cf4 Type\cf0  serviceType);\par ??        T PartialMock&lt;T&gt;(\cf3 params\cf0  \cf3 object\cf0 [] args) \cf3 where\cf0  T : \cf3 class\cf0 ;\par ??    \}}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">interface</span>
                <span style="color: #2b91af;">ServiceLocator</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T Service&lt;T&gt;() <span style="color: blue;">where</span> 
                T : <span style="color: blue;">class</span>;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">object</span> Service(<span 
                    style="color: #2b91af;">Type</span> serviceType);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T PartialMock&lt;T&gt;(<span style="color: blue;">params</span>
                <span style="color: blue;">object</span>[] args) <span style="color: blue;">
                where</span> T : <span style="color: blue;">class</span>;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; }</p>
        </div>
<!--EndFragment-->
<p>The RhinoMocks &quot;AAA&quot; mode is shown below:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;}??\fs20     \cf3 public\cf0  \cf3 class\cf0  \cf4 RhinoMocksAAAServiceLocator\cf0  : \cf4 ServiceLocator\par ??\cf0     \{\par ??        \cf3 private\cf0  \cf3 readonly\cf0  \cf4 RhinoMockRepositoryProxy\cf0  _mocks = \cf3 new\cf0  \cf4 RhinoMockRepositoryProxy\cf0 ();\par ??\par ??        \cf3 public\cf0  T Service&lt;T&gt;() \cf3 where\cf0  T : \cf3 class\par ??\cf0         \{\par ??            \cf3 var\cf0  instance = (T)_mocks.DynamicMock(\cf3 typeof\cf0  (T));\par ??            _mocks.Replay(instance);\par ??            \cf3 return\cf0  instance;\par ??        \}\par ??\par ??        \cf3 public\cf0  \cf3 object\cf0  Service(\cf4 Type\cf0  serviceType)\par ??        \{\par ??            \cf3 var\cf0  instance = _mocks.DynamicMock(serviceType);\par ??            _mocks.Replay(instance);\par ??            \cf3 return\cf0  instance;\par ??        \}\par ??\par ??        \cf3 public\cf0  T PartialMock&lt;T&gt;(\cf3 params\cf0  \cf3 object\cf0 [] args) \cf3 where\cf0  T : \cf3 class\par ??\cf0         \{\par ??            \cf3 var\cf0  instance = (T)_mocks.PartialMock(\cf3 typeof\cf0 (T), args);\par ??            _mocks.Replay(instance);\par ??            \cf3 return\cf0  instance;\par ??        \}\par ??    \}}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">class</span>
                <span style="color: #2b91af;">RhinoMocksAAAServiceLocator</span> :
                <span style="color: #2b91af;">ServiceLocator</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">private</span>
                <span style="color: blue;">readonly</span> <span style="color: #2b91af;">
                RhinoMockRepositoryProxy</span> _mocks = <span style="color: blue;">new</span>
                <span style="color: #2b91af;">RhinoMockRepositoryProxy</span>();</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> T 
                Service&lt;T&gt;() <span style="color: blue;">where</span> T :
                <span style="color: blue;">class</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">
                var</span> instance = (T)_mocks.DynamicMock(<span style="color: blue;">typeof</span> 
                (T));</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _mocks.Replay(instance);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">
                return</span> instance;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span>
                <span style="color: blue;">object</span> Service(<span style="color: #2b91af;">Type</span> 
                serviceType)</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">
                var</span> instance = _mocks.DynamicMock(serviceType);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _mocks.Replay(instance);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">
                return</span> instance;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> T 
                PartialMock&lt;T&gt;(<span style="color: blue;">params</span>
                <span style="color: blue;">object</span>[] args) <span style="color: blue;">
                where</span> T : <span style="color: blue;">class</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">
                var</span> instance = (T)_mocks.PartialMock(<span style="color: blue;">typeof</span>(T), 
                args);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _mocks.Replay(instance);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">
                return</span> instance;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; }</p>
        </div>
<!--EndFragment-->
<p>And this is the Moq version:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;}??\fs20     \cf3 public\cf0  \cf3 class\cf0  \cf4 MoqServiceLocator\cf0  : \cf4 ServiceLocator\par ??\cf0     \{\par ??        \cf3 private\cf0  \cf3 readonly\cf0  \cf4 MoqFactory\cf0  _moqs = \cf3 new\cf0  \cf4 MoqFactory\cf0 ();\par ??        \par ??        \cf3 public\cf0  T Service&lt;T&gt;() \cf3 where\cf0  T : \cf3 class\par ??\cf0         \{\par ??            \cf3 return\cf0  (T)_moqs.CreateMock(\cf3 typeof\cf0 (T));\par ??        \}\par ??\par ??        \cf3 public\cf0  \cf3 object\cf0  Service(\cf4 Type\cf0  serviceType)\par ??        \{\par ??            \cf3 return\cf0  _moqs.CreateMock(serviceType);\par ??        \}\par ??\par ??        \cf3 public\cf0  T PartialMock&lt;T&gt;(\cf3 params\cf0  \cf3 object\cf0 [] args) \cf3 where\cf0  T : \cf3 class\par ??\cf0         \{\par ??            \cf3 return\cf0  (T)_moqs.CreateMockThatCallsBase(\cf3 typeof\cf0  (T), args);\par ??        \}\par ??    \}}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">class</span>
                <span style="color: #2b91af;">MoqServiceLocator</span> :
                <span style="color: #2b91af;">ServiceLocator</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">private</span>
                <span style="color: blue;">readonly</span> <span style="color: #2b91af;">
                MoqFactory</span> _moqs = <span style="color: blue;">new</span>
                <span style="color: #2b91af;">MoqFactory</span>();</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> T 
                Service&lt;T&gt;() <span style="color: blue;">where</span> T :
                <span style="color: blue;">class</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">
                return</span> (T)_moqs.CreateMock(<span style="color: blue;">typeof</span>(T));</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span>
                <span style="color: blue;">object</span> Service(<span style="color: #2b91af;">Type</span> 
                serviceType)</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">
                return</span> _moqs.CreateMock(serviceType);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> T 
                PartialMock&lt;T&gt;(<span style="color: blue;">params</span>
                <span style="color: blue;">object</span>[] args) <span style="color: blue;">
                where</span> T : <span style="color: blue;">class</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">
                return</span> (T)_moqs.CreateMockThatCallsBase(<span style="color: blue;">typeof</span> 
                (T), args);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; }</p>
        </div>
<!--EndFragment-->
<hr />
	    
	    <h2>Supplying Mocks or Stubs to the AutoMocker</h2>
	    <p>Frequently you may want to use the AutoMocker, but override the normal mock 
            object creation with your own stub or hand rolled mock objects.&nbsp; That&#39;s 
            easy enough with the Inject() methods:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red128\green128\blue128;\red0\green128\blue0;\red0\green0\blue255;\red43\green145\blue175;}??\fs20         \cf3 ///\cf4  \cf3 &lt;summary&gt;\par ??\cf0         \cf3 ///\cf4  Method to specify the exact object that will be used for \par ??\cf0         \cf3 ///\cf4  "pluginType."  Useful for stub objects and/or static mocks\par ??\cf0         \cf3 ///\cf4  \cf3 &lt;/summary&gt;\par ??\cf0         \cf3 ///\cf4  \cf3 &lt;param name="pluginType"&gt;&lt;/param&gt;\par ??\cf0         \cf3 ///\cf4  \cf3 &lt;param name="stub"&gt;&lt;/param&gt;\par ??\cf0         \cf5 void\cf0  Inject(\cf6 Type\cf0  pluginType, \cf5 object\cf0  stub);\par ??\par ??        \cf3 ///\cf4  \cf3 &lt;summary&gt;\par ??\cf0         \cf3 ///\cf4  Method to specify the exact object that will be used for \par ??\cf0         \cf3 ///\cf4  "pluginType."  Useful for stub objects and/or static mocks\par ??\cf0         \cf3 ///\cf4  \cf3 &lt;/summary&gt;\par ??\cf0         \cf3 ///\cf4  \cf3 &lt;typeparam name="T"&gt;&lt;/typeparam&gt;\par ??\cf0         \cf3 ///\cf4  \cf3 &lt;param name="target"&gt;&lt;/param&gt;\par ??\cf0         \cf5 void\cf0  Inject&lt;T&gt;(T target);}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span 
                    style="color: green;"> </span><span style="color: gray;">&lt;summary&gt;</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span 
                    style="color: green;"> Method to specify the exact object that will be used 
                for </span>
            </p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span 
                    style="color: green;"> &quot;pluginType.&quot;&nbsp; Useful for stub objects and/or 
                static mocks</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span 
                    style="color: green;"> </span><span style="color: gray;">&lt;/summary&gt;</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span 
                    style="color: green;"> </span><span style="color: gray;">&lt;param 
                name=&quot;pluginType&quot;&gt;&lt;/param&gt;</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span 
                    style="color: green;"> </span><span style="color: gray;">&lt;param 
                name=&quot;stub&quot;&gt;&lt;/param&gt;</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">void</span> Inject(<span 
                    style="color: #2b91af;">Type</span> pluginType, <span style="color: blue;">
                object</span> stub);</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span 
                    style="color: green;"> </span><span style="color: gray;">&lt;summary&gt;</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span 
                    style="color: green;"> Method to specify the exact object that will be used 
                for </span>
            </p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span 
                    style="color: green;"> &quot;pluginType.&quot;&nbsp; Useful for stub objects and/or 
                static mocks</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span 
                    style="color: green;"> </span><span style="color: gray;">&lt;/summary&gt;</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span 
                    style="color: green;"> </span><span style="color: gray;">&lt;typeparam 
                name=&quot;T&quot;&gt;&lt;/typeparam&gt;</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: gray;">///</span><span 
                    style="color: green;"> </span><span style="color: gray;">&lt;param 
                name=&quot;target&quot;&gt;&lt;/param&gt;</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">void</span> Inject&lt;T&gt;(T 
                target);</p>
        </div>
<!--EndFragment-->
<hr />
	    
	    <h2>Partial Mock the ClassUnderTest</h2>
	    <p>Every so often, I find it useful to create a &quot;<a 
                href="http://ayende.com/wiki/Rhino+Mocks+Partial+Mocks.ashx">partial mock</a>&quot; 
            for the ClassUnderTest.&nbsp; That can be done with the AutoMocker by calling 
            the PartialMockTheClassUnderTest() method:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;}??\fs20             \cf3 var\cf0  autoMocker = createAutoMocker&lt;\cf4 ConcreteClass\cf0 &gt;();\par ??\par ??            \cf3 var\cf0  service = autoMocker.Get&lt;\cf4 IMockedService\cf0 &gt;();\par ??            \cf3 var\cf0  service2 = autoMocker.Get&lt;\cf4 IMockedService2\cf0 &gt;();\par ??            \cf3 var\cf0  service3 = autoMocker.Get&lt;\cf4 IMockedService3\cf0 &gt;();\par ??\par ??            autoMocker.PartialMockTheClassUnderTest();}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">
                var</span> autoMocker = createAutoMocker&lt;<span style="color: #2b91af;">ConcreteClass</span>&gt;();</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">
                var</span> service = autoMocker.Get&lt;<span style="color: #2b91af;">IMockedService</span>&gt;();</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">
                var</span> service2 = autoMocker.Get&lt;<span style="color: #2b91af;">IMockedService2</span>&gt;();</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">
                var</span> service3 = autoMocker.Get&lt;<span style="color: #2b91af;">IMockedService3</span>&gt;();</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                autoMocker.PartialMockTheClassUnderTest();</p>
        </div>
<!--EndFragment-->
<p>Expectations and assertions can be made directly on the AutoMocker.ClassUnderTest 
    property.&nbsp; When the PartialMockTheClassUnderTest() method is called, the 
    underlying value behind ClassUnderTest will be a partial mock, but the 
    AutoMocker will still use mock objects for the dependencies of the class under 
    test.</p>
	    <hr />
	</body>
</html>
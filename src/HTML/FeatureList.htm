<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
	<head>
		<title>Feature List</title>
		<link rel="stylesheet" type="text/css" href="style.css" />
		<script type="text/javascript" src="jquery-1.2.6.js"></script>
		<script type="text/javascript" src="structuremap.js"></script>
	</head>
	<body>
	
	    <p>
            StructureMap includes all of the basic capabilities of an IoC tool, plus much, 
            much more:</p>
				<UL>
                    <li>
						Creates objects using the <a href="http://picocontainer.codehaus.org/Constructor+Injection">
							Constructor Injection pattern</a>
                        <UL>
                            <li>Constructor function selection can be overriden programmatically or with an 
                                attribute</li>
                        </UL>
                    </li>
					<LI>
					    Optionally, attach dependencies and other properties through Setter Injection.&nbsp; 
                        Properties can be configured to be mandatory dependencies or optional 
                        dependencies.<UL>
                            <LI>Convention based setter injection policies</UL>
					<LI>
					Runtime linking of object dependencies
					    with auto wiring<LI>
					    &quot;Build Up&quot; using setter injection to attach dependencies to an externally 
                        constructed object<LI>
					    Can be configured to create or resolve objects by:<UL>
                            <LI>Calling constructor functions<LI>Lambda expressions<LI>Cloning a prototype 
                            object<LI>Loading a UserControl<LI>UUsing an externally created object<LI>
                            Conditional Construction of objects<LI>Custom method of construction objects</UL>
                    <LI>Object graphs can be configured inline to override auto wiringLI>Contextual 
                    construction of objects<LI>&quot;Missing Instance&quot; handling<LI>Passing 
                    explicit arguments into the Container<LI>
					Configurable object <a href="Scoping.htm">lifecycle 
					scoping</a> (singleton, transient, HttpContext, ThreadLocal)<LI>
					    Auto registration with pluggable type convention rules<LI>Generalized support for the 
					    <a href="Concepts.htm#Plugin">Plugin</a> pattern using (almost) any type of class or 
					interface
					<LI>Configurable either implicitly through 
					    a programmatic DSL, <a href="UsingAttributes.htm">custom attributes</a>, or explicitly through 
					XML configuration
					<LI>Very modular configuration options.&nbsp; Mix and match any form of 
                        configuration at one time.<LI>Configuration can be added at runtime<LI>Supports type registration of open generic types<LI>Interception capabilities to 
                        apply runtime AOP or decorators<LI>Extensible 
                    object creation<LI><EM>Mock Injection</EM> with Containers 
                    <LI>Runtime injection of a static mock or stub<LI>An Auto Mocking Container that 
                    can be used with any .Net mocking framework.&nbsp; Rhino Mocks &quot;Classic&quot;, Rhino 
                    Mocks AAA, and Moq are supported out of the box<LI>Machine level overrides of default configuration
					<LI>Profile overrides of default configuration -- i.e. "Remote" vs "Local" vs 
					"Stubbed" dependency profiles
					<LI>Command line utility for troubleshooting runtime&nbsp;configuration issues<UL>
                        <LI>Diagnostic querying of the Container configuration (Linq to StructureMap, sort 
                            of)<LI>&quot;Assert&quot; configuration 
                        is valid<LI>Environment Test Support<LI>Custom Debugger</UL>
                    <LI>Uses Reflection.Emit namespace classes to create IL code on the fly for 
						performance superior to Reflection based approaches</LI>
				</UL>
	
	</body>
</html>
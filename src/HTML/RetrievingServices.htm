<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
	<head>
		<title>Retrieving Services</title>
		<link rel="stylesheet" type="text/css" href="style.css" />
		<script type="text/javascript" src="jquery-1.2.6.js"></script>
		<script type="text/javascript" src="structuremap.js"></script>
	</head>
	<body>
	<p>Assuming that StructureMap has been configured with all the services and 
        components that your system needs, it&#39;s time to actually get to these services.&nbsp; 
        In normal usage, most service retrieval is done through the static ObjectFactory 
        class, but the same functionality is available through the Container class 
        by itself.&nbsp; </p>
	    <h2>
            Get a Service by PluginType</h2>
        <p>By far and away the most common usage of a StructureMap is to simply retrieve 
            and/or build the default instance of a given service type.&nbsp; Let&#39;s say that I have a service called 
            &quot;ITestEventPublisher.&quot;&nbsp; To get an object instance of this interface I can call the GetInstance() 
            method of the ObjectFactory class.</p>
    <p>With the generic method:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red43\green145\blue175;\red255\green255\blue255;\red0\green0\blue0;}??\fs20 \cf1 ITestEventPublisher\cf0  publisher = \cf1 ObjectFactory\cf0 .GetInstance&lt;\cf1 ITestEventPublisher\cf0 &gt;();}
-->
    <div style="font-family: Courier New; font-size: 10pt; color: black; background: white;">
        <p style="margin: 0px;">
            <span style="color: #2b91af;">ITestEventPublisher</span> publisher =
            <span style="color: #2b91af;">ObjectFactory</span>.GetInstance&lt;<span 
                style="color: #2b91af;">ITestEventPublisher</span>&gt;();</p>
    </div>
<!--EndFragment-->
<p>
    Or without using generics (adds a cast):</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red43\green145\blue175;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue255;}??\fs20 \cf1 ITestEventPublisher\cf0  publisher = (\cf1 ITestEventPublisher\cf0 ) \cf1 ObjectFactory\cf0 .GetInstance(\cf4 typeof\cf0 (\cf1 ITestEventPublisher\cf0 ));}
-->
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white;">
    <p style="margin: 0px;">
        <span style="color: #2b91af;">ITestEventPublisher</span> publisher = (<span 
            style="color: #2b91af;">ITestEventPublisher</span>)
        <span style="color: #2b91af;">ObjectFactory</span>.GetInstance(<span 
            style="color: blue;">typeof</span>(<span style="color: #2b91af;">ITestEventPublisher</span>));</p>
    <p style="margin: 0px;">
        &nbsp;</p>
</div>
<!--EndFragment-->
<p style="margin: 0px">
    If there is only one <a href="Glossary.htm">Instance</a> for a registered PluginType, that Instance will be assumed to 
            be the default for the PluginType.&nbsp; Otherwise, if there is more than one 
            Instance for a PluginType, StructureMap must be explicitly told which Instance 
            is the default, otherwise the call to GetInstance() will throw an exception 
            (202).&nbsp; If a call to GetInstance() is made for a concrete type that is not 
            configured, StructureMap will attempt to create a new instance of this class.&nbsp; 
            See <a href="RetrievingServices.htm">Concrete Types</a> for more information.</p>
<hr />
    <h2>Get a Service by PluginType and Name</h2>
    
	<p>
        Sometimes it&#39;s advantageous to retrieve a &quot;named&quot; instance of a type.&nbsp; 
        Let&#39;s say that you&#39;re building a system that needs to connect to interface with 
        multiple external shipping systems.&nbsp; You&#39;ve designed an interface for your 
        system called IShippingSystem that hides the details of each external shipping 
        behind adapters.&nbsp; The rest of your code should only &quot;know&quot; how to interact 
        with the IShippingSystem, but at some point, some class needs to know how to 
        select and retrieve the proper instance of IShippingSystem.&nbsp; Before the 
        advent of IoC containers like StructureMap, you would have coded a Factory class 
        and possibly a Builder class by hand to do the construction.&nbsp; With 
        StructureMap, this code is simply a call to the 
        ObjectFactory.GetNamedInstance(Type, string) method. </p>
    
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green128\blue0;\red43\green145\blue175;\red163\green21\blue21;\red0\green0\blue255;}??\fs20             \cf3 // With generics\par ??\cf0             \cf4 IShippingService\cf0  internationalService = \cf4 ObjectFactory\cf0 .GetNamedInstance&lt;\cf4 IShippingService\cf0 &gt;(\cf5 "International"\cf0 );\par ??            \cf4 IShippingService\cf0  domesticService = \cf4 ObjectFactory\cf0 .GetNamedInstance&lt;\cf4 IShippingService\cf0 &gt;(\cf5 "Domestic"\cf0 );\par ??\par ??            \cf3 // Without generics\par ??\cf0             \cf4 IShippingService\cf0  internationalService2 = \par ??                (\cf4 IShippingService\cf0 ) \cf4 ObjectFactory\cf0 .GetNamedInstance(\cf6 typeof\cf0 (\cf4 IShippingService\cf0 ), \cf5 "International"\cf0 );\par ??        }
-->
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white;">
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: green;">// With generics</span></p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: #2b91af;">IShippingService</span> internationalService =
        <span style="color: #2b91af;">ObjectFactory</span>.GetNamedInstance&lt;<span 
            style="color: #2b91af;">IShippingService</span>&gt;(<span 
            style="color: #a31515;">&quot;International&quot;</span>);</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: #2b91af;">IShippingService</span> domesticService =
        <span style="color: #2b91af;">ObjectFactory</span>.GetNamedInstance&lt;<span 
            style="color: #2b91af;">IShippingService</span>&gt;(<span 
            style="color: #a31515;">&quot;Domestic&quot;</span>);</p>
    <p style="margin: 0px;">
        &nbsp;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: green;">// Without generics</span></p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: #2b91af;">IShippingService</span> internationalService2 =
    </p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        (<span style="color: #2b91af;">IShippingService</span>)
        <span style="color: #2b91af;">ObjectFactory</span>.GetNamedInstance(<span 
            style="color: blue;">typeof</span>(<span style="color: #2b91af;">IShippingService</span>),
        <span style="color: #a31515;">&quot;International&quot;</span>);</p>
</div>
<!--EndFragment-->
<p>
    The GetNamedInstance(Type, string) method can be used like a generic factory:</p>
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white;">
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: blue;">string</span> serviceName = determineShippingService();</p>
<p style="margin: 0px;">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">IShippingService</span> service = <span style="color: #2b91af;">ObjectFactory</span>.GetNamedInstance&lt;<span style="color: #2b91af;">IShippingService</span>&gt;(serviceName);</p>
    </div>
    <hr />
    
<h2>Get all Instances of a PluginType</h2>
<p>The ObjectFactory.GetAllInstances() method will construct and return a list of 
    all the registered instances for a given PluginType.&nbsp; This is a very useful 
    feature for pluggable rules and chain of responsibility patterns where you might 
    be adding new &quot;handlers&quot; to a system.&nbsp; Here&#39;s a typical scenario for this 
    feature in an invoice processing system.&nbsp; It&#39;s a given that additional 
    validation rules will need to be created and &quot;plugged&quot; into the system at a 
    later date.&nbsp; To handle this scenario, you might create an interface like 
    this:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;}??\fs20         \cf3 public\cf0  \cf3 interface\cf0  \cf4 InvoiceValidator\par ??\cf0         \{\par ??            \cf3 void\cf0  Validate(\cf4 Invoice\cf0  invoice, \cf4 ValidationResult\cf0  result);\par ??        \}}
-->
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white;">
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span>
        <span style="color: blue;">interface</span> <span style="color: #2b91af;">
        InvoiceValidator</span></p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: blue;">void</span> Validate(<span style="color: #2b91af;">Invoice</span> 
        invoice, <span style="color: #2b91af;">ValidationResult</span> result);</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
</div>
<!--EndFragment-->
<p>Now, let&#39;s assume that you&#39;ve configured zero or more Instances of the 
    InvoiceValidator.&nbsp; Somewhere in your invoice processing code you would use 
    the ObjectFactory.GetAllInstances() method to retrieve all of the 
    InvoiceValidator validation rules, and give each a chance to validate an Invoice 
    object.</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green128\blue0;\red0\green0\blue255;\red43\green145\blue175;}??\fs20         \cf3 // With Generics\par ??\cf0         \cf4 public\cf0  \cf5 ValidationResult\cf0  RunRulesWithGenerics(\cf5 Invoice\cf0  invoice)\par ??        \{\par ??            \cf5 ValidationResult\cf0  result = \cf4 new\cf0  \cf5 ValidationResult\cf0 ();\par ??\par ??            \cf5 IList\cf0 &lt;\cf5 InvoiceValidator\cf0 &gt; validators = \cf5 ObjectFactory\cf0 .GetAllInstances&lt;\cf5 InvoiceValidator\cf0 &gt;();\par ??            \cf4 foreach\cf0  (\cf4 var\cf0  validator \cf4 in\cf0  validators)\par ??            \{\par ??                validator.Validate(invoice, result);\par ??            \}\par ??\par ??            \cf4 return\cf0  result;\par ??        \}\par ??\par ??        \cf3 // Without Generics\par ??\cf0         \cf4 public\cf0  \cf5 ValidationResult\cf0  RunRulesWithoutGenerics(\cf5 Invoice\cf0  invoice)\par ??        \{\par ??            \cf5 ValidationResult\cf0  result = \cf4 new\cf0  \cf5 ValidationResult\cf0 ();\par ??\par ??            \cf5 IList\cf0  validators = \cf5 ObjectFactory\cf0 .GetAllInstances(\cf4 typeof\cf0 (\cf5 InvoiceValidator\cf0 ));\par ??            \cf4 foreach\cf0  (\cf5 InvoiceValidator\cf0  validator \cf4 in\cf0  validators)\par ??            \{\par ??                validator.Validate(invoice, result);\par ??            \}\par ??\par ??            \cf4 return\cf0  result;\par ??        \}}
-->
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white;">
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">// With Generics</span></p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span>
        <span style="color: #2b91af;">ValidationResult</span> RunRulesWithGenerics(<span 
            style="color: #2b91af;">Invoice</span> invoice)</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: #2b91af;">ValidationResult</span> result =
        <span style="color: blue;">new</span> <span style="color: #2b91af;">
        ValidationResult</span>();</p>
    <p style="margin: 0px;">
        &nbsp;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: #2b91af;">IList</span>&lt;<span style="color: #2b91af;">InvoiceValidator</span>&gt; 
        validators = <span style="color: #2b91af;">ObjectFactory</span>.GetAllInstances&lt;<span 
            style="color: #2b91af;">InvoiceValidator</span>&gt;();</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: blue;">foreach</span> (<span style="color: blue;">var</span> 
        validator <span style="color: blue;">in</span> validators)</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        validator.Validate(invoice, result);</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
    <p style="margin: 0px;">
        &nbsp;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: blue;">return</span> result;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
    <p style="margin: 0px;">
        &nbsp;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">// Without 
        Generics</span></p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span>
        <span style="color: #2b91af;">ValidationResult</span> RunRulesWithoutGenerics(<span 
            style="color: #2b91af;">Invoice</span> invoice)</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: #2b91af;">ValidationResult</span> result =
        <span style="color: blue;">new</span> <span style="color: #2b91af;">
        ValidationResult</span>();</p>
    <p style="margin: 0px;">
        &nbsp;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: #2b91af;">IList</span> validators =
        <span style="color: #2b91af;">ObjectFactory</span>.GetAllInstances(<span 
            style="color: blue;">typeof</span>(<span style="color: #2b91af;">InvoiceValidator</span>));</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: blue;">foreach</span> (<span style="color: #2b91af;">InvoiceValidator</span> 
        validator <span style="color: blue;">in</span> validators)</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        validator.Validate(invoice, result);</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
    <p style="margin: 0px;">
        &nbsp;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: blue;">return</span> result;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
</div>
<!--EndFragment-->
<p>By design, if no instances of InvoiceValidator are configured, a call to 
    ObjectFactory.GetAllInstances&lt;InvoiceValidator&gt;() will return a zero length 
    IList&lt;InvoiceValidator&gt;.&nbsp; Previous versions of StructureMap would throw an 
    exception in this case.&nbsp; </p>
    <hr />
    <h2>"Fill" all of the Dependencies of a Concrete Class</h2>
    <p>Sometimes you know what concrete class you need in a scenario, but you still want 
        StructureMap to construct the class and &quot;fill&quot; it with any of its dependencies.&nbsp; 
        I&#39;ve used this functionality in the past on large desktop clients for 
        configuring navigation and menu commands.&nbsp; In my desktop clients I use the 
        <a href="http://martinfowler.com/eaaCatalog/applicationController.html">Application Controller</a> pattern to govern screen activation throughout the 
        entire system.&nbsp; Various screen elements can open new screens by telling the 
        ApplicationController service to activate a new 
        <a href="http://msdn.microsoft.com/en-us/magazine/cc188690.aspx">Presenter</a>.&nbsp; Let&#39;s say 
        that I have a screen for configuring shipments in the system.&nbsp; That screen 
        is managed by the ShippingScreenPresenter shown below:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;}??\fs20     \cf3 public\cf0  \cf3 class\cf0  \cf4 ShippingScreenPresenter\cf0  : \cf4 IPresenter\par ??\cf0     \{\par ??        \cf3 private\cf0  \cf3 readonly\cf0  \cf4 IShippingService\cf0  _service;\par ??        \cf3 private\cf0  \cf3 readonly\cf0  \cf4 IRepository\cf0  _repository;\par ??\par ??        \cf3 public\cf0  ShippingScreenPresenter(\cf4 IShippingService\cf0  service, \cf4 IRepository\cf0  repository)\par ??        \{\par ??            _service = service;\par ??            _repository = repository;\par ??        \}\par ??\par ??        \cf3 public\cf0  \cf3 void\cf0  Activate()\par ??        \{\par ??        \}\par ??    \}}
-->
    <div style="font-family: Courier New; font-size: 10pt; color: black; background: white;">
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">class</span>
            <span style="color: #2b91af;">ShippingScreenPresenter</span> :
            <span style="color: #2b91af;">IPresenter</span></p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; {</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">private</span>
            <span style="color: blue;">readonly</span> <span style="color: #2b91af;">
            IShippingService</span> _service;</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">private</span>
            <span style="color: blue;">readonly</span> <span style="color: #2b91af;">
            IRepository</span> _repository;</p>
        <p style="margin: 0px;">
            &nbsp;</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> 
            ShippingScreenPresenter(<span style="color: #2b91af;">IShippingService</span> 
            service, <span style="color: #2b91af;">IRepository</span> repository)</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _service = service;</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _repository = repository;</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; }</p>
    </div>
<!--EndFragment-->
<p>Now, another Presenter or a menu item somewhere may want to activate a new 
    ShippingScreenPresenter, and even &quot;know&quot; the concrete type 
    ShippingScreenPresenter is the correct Presenter type, but won&#39;t know how to 
    create and attach instances of IShippingService or IRepository.&nbsp; Finding, 
    building, and attaching dependencies is the sole purpose of an IoC container, so 
    let&#39;s let StructureMap do that work for us in the ApplicationController.</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;}??\fs20     \cf3 public\cf0  \cf3 class\cf0  \cf4 ApplicationController\par ??\cf0     \{\par ??        \cf3 public\cf0  \cf3 void\cf0  ActivateScreenFor&lt;T&gt;() \cf3 where\cf0  T : \cf4 IPresenter\par ??\cf0         \{\par ??            \cf4 IPresenter\cf0  presenter = \cf4 ObjectFactory\cf0 .FillDependencies&lt;T&gt;();\par ??            presenter.Activate();\par ??        \}\par ??    \}}
-->
    <div style="font-family: Courier New; font-size: 10pt; color: black; background: white;">
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">class</span>
            <span style="color: #2b91af;">ApplicationController</span></p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; {</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span>
            <span style="color: blue;">void</span> ActivateScreenFor&lt;T&gt;()
            <span style="color: blue;">where</span> T : <span style="color: #2b91af;">
            IPresenter</span></p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <span style="color: #2b91af;">IPresenter</span> presenter =
            <span style="color: #2b91af;">ObjectFactory</span>.FillDependencies&lt;T&gt;();</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; presenter.Activate();</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; }</p>
</div>
<!--EndFragment-->
<p>The ShippingScreenPresenter can now be activated by this code:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red43\green145\blue175;}??\fs20             \cf3 ApplicationController\cf0  controller = \cf3 ObjectFactory\cf0 .GetInstance&lt;\cf3 ApplicationController\cf0 &gt;();\par ??            controller.ActivateScreenFor&lt;\cf3 ShippingScreenPresenter\cf0 &gt;();}
-->
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white;">
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: #2b91af;">ApplicationController</span> controller =
        <span style="color: #2b91af;">ObjectFactory</span>.GetInstance&lt;<span 
            style="color: #2b91af;">ApplicationController</span>&gt;();</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        controller.ActivateScreenFor&lt;<span style="color: #2b91af;">ShippingScreenPresenter</span>&gt;();</p>
</div>
<!--EndFragment-->
<p>It is not necessary to configure the ShippingScreenPresenter class prior to 
    calling ObjectFactory.FillDependencies&lt;ShippingScreenPresenter&gt;().&nbsp; I 
    should note that as of StructureMap 2.5, a call to 
    ObjectFactory.GetInstance&lt;ShippingScreenPresenter&gt;() will behave identically to 
    ObjectFactory.FillInstances&lt;ShippingScreenPresenter&gt;().&nbsp; Originally, I felt 
    that it was important to make this behavior explicit.&nbsp; In later versions of 
    StructureMap I&#39;ve adopted more of an attitude of &quot;just let it work.&quot;&nbsp; </p>
    
    <hr />
    <h2>Passing Arguments to StructureMap at Runtime</h2>
    <p>Sometimes you want to explicitly pass an argument to StructureMap while letting 
        it handle all of the other arguments and dependencies.&nbsp; I run into this 
        most frequently inside of desktop clients when I need to create and execute a 
        screen or a Command using an existing screen element or object.&nbsp; Let&#39;s say 
        we&#39;re building a desktop client (WPF or WinForms) for invoice processing.&nbsp; 
        There is a screen somewhere that enables users to query for invoices and select 
        one for editing.&nbsp; The query screen needs to activate a new instance of the 
        EditInvoicePresenter to start the invoice editing.&nbsp; The 
        EditInvoicePresenter declares its dependencies in its constructor function:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;}??\fs20         \cf3 public\cf0  EditInvoicePresenter(\cf4 IRepository\cf0  repository, \cf4 IEditInvoiceView\cf0  view, \cf4 Invoice\cf0  invoice)\par ??        \{\par ??            _repository = repository;\par ??            _view = view;\par ??            _invoice = invoice;\par ??        \}}
-->
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white;">
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> 
        EditInvoicePresenter(<span style="color: #2b91af;">IRepository</span> 
        repository, <span style="color: #2b91af;">IEditInvoiceView</span> view,
        <span style="color: #2b91af;">Invoice</span> invoice)</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _repository = 
        repository;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _view = view;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _invoice = invoice;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
</div>
<!--EndFragment-->
<p>The query screen knows the exact Invoice object to edit, but it certainly 
    shouldn&#39;t be responsible or knowledgeable about the other dependencies of the 
    EditInvoicePresenter class.&nbsp; That would represent the kind of tight 
    coupling that makes systems resistent to change and harder to build.&nbsp; What 
    we want to do instead is tell StructureMap to build an EditInvoicePresenter with 
    this particular Invoice.</p>
    
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red43\green145\blue175;}??\fs20             \cf3 EditInvoicePresenter\cf0  presenter = \cf3 ObjectFactory\cf0 .With&lt;\cf3 Invoice\cf0 &gt;(invoice).GetInstance&lt;\cf3 EditInvoicePresenter\cf0 &gt;();\par ??            controller.ActivateScreen(presenter);}
-->
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white;">
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: #2b91af;">EditInvoicePresenter</span> presenter =
        <span style="color: #2b91af;">ObjectFactory</span><b>.With&lt;</b><span 
            class="style1" style="color: #2b91af;">Invoice</span><b>&gt;(invoice)</b>.GetInstance&lt;<span 
            style="color: #2b91af;">EditInvoicePresenter</span>&gt;();</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        controller.ActivateScreen(presenter);</p>
</div>
<!--EndFragment-->
<p>
    In the code above I used the With&lt;T&gt;(T dependency) method to pass in the 
    explicit argument.&nbsp; When StructureMap builds the EditInvoicePresenter 
    object, it &quot;knows&quot; to use the invoice instance passed in for any argument of 
    type Invoice in the EditInvoicePresenter.&nbsp; I could also pass arguments by 
    name and multiple 
    arguments.&nbsp; Here is another example from the unit tests.</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red43\green145\blue175;\red255\green255\blue255;\red0\green0\blue0;\red163\green21\blue21;}??\fs20 \cf1 ExplicitTarget\cf0  secondTarget = \cf1 ObjectFactory\cf0 .With(\cf4 "name"\cf0 ).EqualTo(\cf4 "Julia"\cf0 ).GetInstance&lt;\cf1 ExplicitTarget\cf0 &gt;();}
-->
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white;">
    <p style="margin: 0px;">
        &nbsp;</p>
</div>
<!--EndFragment-->
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red43\green145\blue175;\red163\green21\blue21;}??\fs20             \cf3 Command\cf0  command = container\par ??                .With(\cf4 "node"\cf0 ).EqualTo(theNode)\par ??                .With(theTrade)\par ??                .GetInstance&lt;\cf3 Command\cf0 &gt;();}
-->
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white;">
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: #2b91af;">Command</span> command = ObjectFactory</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        .With(<span style="color: #a31515;">&quot;node&quot;</span>).EqualTo(theNode)</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        .With(theTrade)</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        .GetInstance&lt;<span style="color: #2b91af;">Command</span>&gt;();</p>
    <p style="margin: 0px;">
        &nbsp;</p>
</div>
<!--EndFragment-->
<p style="margin: 0px">
    This functionality will also work for getting all instances of a given 
    PluginType:</p>
        <p style="margin: 0px">
            &nbsp;</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;}??\fs20             \cf3 var\cf0  theTrade = \cf3 new\cf0  \cf4 Trade\cf0 ();\par ??            \cf4 IList\cf0 &lt;\cf4 TradeView\cf0 &gt; views = container.With(theTrade).GetAllInstances&lt;\cf4 TradeView\cf0 &gt;();\par ??}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">
                var</span> theTrade = <span style="color: blue;">new</span>
                <span style="color: #2b91af;">Trade</span>();</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">
                IList</span>&lt;<span style="color: #2b91af;">TradeView</span>&gt; views = 
                container.With(theTrade).GetAllInstances&lt;<span style="color: #2b91af;">TradeView</span>&gt;();</p>
        </div>
<!--EndFragment-->
<p style="margin: 0px">
            &nbsp;</p>
        <p style="margin: 0px">
            In some cases it might be more convenient to bypass the Fluent Interface for 
            explicit arguments and pass the arguments in as a single dictionary like object 
            called &quot;ExplicitArguments:&quot;</p>
        <p style="margin: 0px">
            &nbsp;</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;\red163\green21\blue21;}??\fs20             \cf3 var\cf0  theNode = \cf3 new\cf0  \cf4 Node\cf0 ();\par ??            \cf3 var\cf0  theTrade = \cf3 new\cf0  \cf4 Trade\cf0 ();\par ??\par ??            \cf3 var\cf0  args = \cf3 new\cf0  \cf4 ExplicitArguments\cf0 ();\par ??            args.Set(theNode);\par ??            args.SetArg(\cf5 "trade"\cf0 , theTrade);\par ??\par ??            \cf3 var\cf0  command = container.GetInstance&lt;\cf4 Command\cf0 &gt;(args);}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">
                var</span> theNode = <span style="color: blue;">new</span>
                <span style="color: #2b91af;">Node</span>();</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">
                var</span> theTrade = <span style="color: blue;">new</span>
                <span style="color: #2b91af;">Trade</span>();</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">
                var</span> args = <span style="color: blue;">new</span>
                <span style="color: #2b91af;">ExplicitArguments</span>();</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; args.Set(theNode);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; args.SetArg(<span 
                    style="color: #a31515;">&quot;trade&quot;</span>, theTrade);</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">
                var</span> command = container.GetInstance&lt;<span style="color: #2b91af;">Command</span>&gt;(args);</p>
        </div>
<!--EndFragment-->
<p style="margin: 0px">
            &nbsp;</p>
        <p style="margin: 0px">
            &nbsp;</p>
        <p style="margin: 0px">
            See &quot;<a href="AutoWiring.htm">AutoWiring</a>&quot; for more information on this 
            functionality.</p>

                <p style="margin: 0px">
                    &nbsp;</p>
<hr />
<h2>
    &quot;Try&quot; to Get an Instance</h2>
    
	    <p>
            A relatively new function of StructureMap is the ability to &quot;try&quot; to retrieve a 
            service if it exists, but gracefully return null if the requested service does 
            not exist.&nbsp; Similar to the &quot;TryParse()&quot; methods in the .Net BCL, 
            StructureMap exposes the &quot;TryGetInstance&quot; methods on both Container and the 
            static ObjectFactory class:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red128\green128\blue128;\red0\green128\blue0;\red0\green0\blue255;\red43\green145\blue175;}??\fs20         \cf3 ///\cf4  \cf3 &lt;summary&gt;\par ??\cf0         \cf3 ///\cf4  Creates or finds the named instance of the pluginType. Returns null if the named instance is not known to the container.\par ??\cf0         \cf3 ///\cf4  \cf3 &lt;/summary&gt;\par ??\cf0         \cf3 ///\cf4  \cf3 &lt;param name="pluginType"&gt;&lt;/param&gt;\par ??\cf0         \cf3 ///\cf4  \cf3 &lt;param name="instanceKey"&gt;&lt;/param&gt;\par ??\cf0         \cf3 ///\cf4  \cf3 &lt;returns&gt;&lt;/returns&gt;\par ??\cf0         \cf5 object\cf0  TryGetInstance(\cf6 Type\cf0  pluginType, \cf5 string\cf0  instanceKey);\par ??\par ??        \cf3 ///\cf4  \cf3 &lt;summary&gt;\par ??\cf0         \cf3 ///\cf4  Creates or finds the default instance of the pluginType. Returns null if the pluginType is not known to the container.\par ??\cf0         \cf3 ///\cf4  \cf3 &lt;/summary&gt;\par ??\cf0         \cf3 ///\cf4  \cf3 &lt;param name="pluginType"&gt;&lt;/param&gt;\par ??\cf0         \cf3 ///\cf4  \cf3 &lt;returns&gt;&lt;/returns&gt;\par ??\cf0         \cf5 object\cf0  TryGetInstance(\cf6 Type\cf0  pluginType);\par ??\par ??        \cf3 ///\cf4  \cf3 &lt;summary&gt;\par ??\cf0         \cf3 ///\cf4  Creates or finds the default instance of type T. Returns the default value of T if it is not known to the container.\par ??\cf0         \cf3 ///\cf4  \cf3 &lt;/summary&gt;\par ??\cf0         \cf3 ///\cf4  \cf3 &lt;typeparam name="T"&gt;&lt;/typeparam&gt;\par ??\cf0         \cf3 ///\cf4  \cf3 &lt;returns&gt;&lt;/returns&gt;\par ??\cf0         T TryGetInstance&lt;T&gt;();\par ??\par ??        \cf3 ///\cf4  \cf3 &lt;summary&gt;\par ??\cf0         \cf3 ///\cf4  Creates or finds the named instance of type T. Returns the default value of T if the named instance is not known to the container.\par ??\cf0         \cf3 ///\cf4  \cf3 &lt;/summary&gt;\par ??\cf0         \cf3 ///\cf4  \cf3 &lt;typeparam name="T"&gt;&lt;/typeparam&gt;\par ??\cf0         \cf3 ///\cf4  \cf3 &lt;returns&gt;&lt;/returns&gt;\par ??\cf0         T TryGetInstance&lt;T&gt;(\cf5 string\cf0  instanceKey);}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">object</span> 
                TryGetInstance(<span style="color: #2b91af;">Type</span> pluginType,
                <span style="color: blue;">string</span> instanceKey);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">object</span> 
                TryGetInstance(<span style="color: #2b91af;">Type</span> pluginType);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T TryGetInstance&lt;T&gt;();</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T TryGetInstance&lt;T&gt;(<span style="color: blue;">string</span> 
                instanceKey);</p>
        </div>
<!--EndFragment-->
<p>
    As you might expect, these methods do not throw exceptions if the requested 
    Instance does not exist:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red43\green145\blue175;\red0\green0\blue255;\red163\green21\blue21;\red0\green128\blue0;}??\fs20         [\cf3 Test\cf0 ]\par ??        \cf4 public\cf0  \cf4 void\cf0  TryGetInstanceViaNameAndGeneric_ReturnsNull_WhenTypeNotFound()\par ??        \{\par ??            addColorInstance(\cf5 "Red"\cf0 );\par ??            addColorInstance(\cf5 "Orange"\cf0 );\par ??            addColorInstance(\cf5 "Blue"\cf0 );\par ??\par ??            \cf6 // "Yellow" does not exist, so return null\par ??\cf0             \cf4 var\cf0  instance = _container.TryGetInstance&lt;\cf3 Rule\cf0 &gt;(\cf5 "Yellow"\cf0 );\par ??            instance.ShouldBeNull();\par ??        \}\par ??\par ??        [\cf3 Test\cf0 ]\par ??        \cf4 public\cf0  \cf4 void\cf0  TryGetInstanceViaNameAndGeneric_ReturnsInstance_WhenTypeFound()\par ??        \{\par ??            addColorInstance(\cf5 "Red"\cf0 );\par ??            addColorInstance(\cf5 "Orange"\cf0 );\par ??            addColorInstance(\cf5 "Blue"\cf0 );\par ??\par ??            \cf6 // "Orange" exists, so an object should be returned\par ??\cf0             \cf4 var\cf0  instance = _container.TryGetInstance&lt;\cf3 Rule\cf0 &gt;(\cf5 "Orange"\cf0 );\par ??            instance.ShouldBeOfType(\cf4 typeof\cf0 (\cf3 ColorRule\cf0 ));\par ??        \}}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [<span style="color: #2b91af;">Test</span>]</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span>
                <span style="color: blue;">void</span> 
                TryGetInstanceViaNameAndGeneric_ReturnsNull_WhenTypeNotFound()</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addColorInstance(<span 
                    style="color: #a31515;">&quot;Red&quot;</span>);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addColorInstance(<span 
                    style="color: #a31515;">&quot;Orange&quot;</span>);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addColorInstance(<span 
                    style="color: #a31515;">&quot;Blue&quot;</span>);</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">
                // &quot;Yellow&quot; does not exist, so return null</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">
                var</span> instance = _container.TryGetInstance&lt;<span style="color: #2b91af;">Rule</span>&gt;(<span 
                    style="color: #a31515;">&quot;Yellow&quot;</span>);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; instance.ShouldBeNull();</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [<span style="color: #2b91af;">Test</span>]</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span>
                <span style="color: blue;">void</span> 
                TryGetInstanceViaNameAndGeneric_ReturnsInstance_WhenTypeFound()</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addColorInstance(<span 
                    style="color: #a31515;">&quot;Red&quot;</span>);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addColorInstance(<span 
                    style="color: #a31515;">&quot;Orange&quot;</span>);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addColorInstance(<span 
                    style="color: #a31515;">&quot;Blue&quot;</span>);</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">
                // &quot;Orange&quot; exists, so an object should be returned</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">
                var</span> instance = _container.TryGetInstance&lt;<span style="color: #2b91af;">Rule</span>&gt;(<span 
                    style="color: #a31515;">&quot;Orange&quot;</span>);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; instance.ShouldBeOfType(<span 
                    style="color: blue;">typeof</span>(<span style="color: #2b91af;">ColorRule</span>));</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
        </div>
<!--EndFragment-->
<p>
    &nbsp;</p>
    
	</body>
</html>
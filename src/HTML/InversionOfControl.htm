<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
	<head>
		<title>Inversion of Control</title>
		<link rel="stylesheet" type="text/css" href="style.css" />
		<script type="text/javascript" src="jquery-1.2.6.js"></script>
		<script type="text/javascript" src="structuremap.js"></script>
	</head>
	<body>
	
	    <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <a href="http://codebetter.com/blogs/jeremy.miller/archive/2005/09/13/131897.aspx" 
                mce_href="http://codebetter.com/blogs/jeremy.miller/archive/2005/09/13/131897.aspx">
            Inversion of Control</a> (IoC) is an essential tool for any software designer’s 
            design toolbox because it’s often a great way to break dependencies between 
            classes and promote loose coupling.<span style="">&nbsp; </span>IoC is vital for 
            doing Test Driven Development without pulling out all of your hair in 
            frustration.<span style="">&nbsp; </span>
        </p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            &nbsp;</p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            This was originally published on
            <a href="http://codebetter.com/blogs/jeremy.miller/archive/2005/09/20/132290.aspx">
            Jeremy&#39;s blog</a> in September of 2005, but the principles still apply equally 
            today.</p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt 0.25in;">
            <o:p>&nbsp;</o:p></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <o:p>&nbsp;</o:p></p>
        <h2>Real Life Example</h2>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <b style=""><o:p>&nbsp;</o:p></b></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            I’m doing an interesting refactoring early this week on some existing code.<span 
                style="">&nbsp; </span>I apologize in advance for being a little vague, but 
            the NDA thingy gets in the way a bit here.<span style="">&nbsp; </span>The 
            product that my team works on is basically a B2B hub between sender companies 
            (spokes) and receiving companies.<span style="">&nbsp; </span>
        </p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <o:p>&nbsp;</o:p></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            The application:
        </p>
        <ol style="margin-top: 0in;" type="1">
            <li class="MsoNormal" style="margin: 0in 0in 0pt;">Receives a message in one of a 
                handful of industry standards and 3<sup>rd</sup> party formats </li>
            <li class="MsoNormal" style="margin: 0in 0in 0pt;">Converts the data into a
                <a href="http://codebetter.com/blogs/jeremy.miller/archive/2005/09/13/131897.aspx" 
                    mce_href="http://codebetter.com/blogs/jeremy.miller/archive/2005/09/13/131897.aspx">
                canonical data format</a> </li>
            <li class="MsoNormal" style="margin: 0in 0in 0pt;">Performs a variety of business 
                validations </li>
            <li class="MsoNormal" style="margin: 0in 0in 0pt;">Translates the results into yet 
                another industry standard for transmittal to another downstream system</li>
        </ol>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <o:p>&nbsp;</o:p></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            The translation code is obviously critical to the system, so it’s very important 
            that the automated testing is rock solid.<span style="">&nbsp; </span>Moreover, 
            that code would be extremely useful in many other contexts throughout our 
            enterprise.<span style="">&nbsp; </span>The code works just fine and there is a 
            robust suite of automated tests ensuring that the code continues to work.<span 
                style="">&nbsp; </span>I had tried in the past to adapt this code inside of 
            an automated regression test tool without any success because it had too much 
            “tail.”<span style="">&nbsp; </span>What I mean by this is that the code can 
            only function with some specific dependencies on a couple of different data 
            sources that weren’t necessarily easy or even possible to recreate without 
            bringing in a large fraction of the system.<span style="">&nbsp; </span>Using 
            the translation code requires some data access code which in turn requires some 
            configuration code and external settings in a Registry (We’re going to make this 
            go away too.<span style="">&nbsp; </span>I detest using the Registry for any 
            configuration, much less as a Plugin strategy.).</p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <o:p>&nbsp;</o:p></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            In an ongoing effort to speed up a slow (15-20 minutes) build, I managed to 
            break the integration tests for the translation classes and had an opportunity 
            to look much closer at this code.<span style="">&nbsp; </span>Here’s roughly 
            what I found:</p>
            
            <div class="code-sample">
            
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <o:p>&nbsp;</o:p></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: blue;">public</span> <span style="color: blue;">class</span> 
            Translator1<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>{<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: blue;">private</span> <span style="color: blue;">
            readonly</span> IDataSource _source;<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: blue;">public</span> Translator1(IDataSource source)<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>{<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>_source = source;<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>}<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: blue;">public</span> Translator1()<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>{<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>_source = <span style="color: blue;">new</span> CompanyDataSource();<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>}<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: blue;">public</span> XmlDocument TranslateFlatFile(<span 
                style="color: blue;">byte</span>[] contents, <span style="color: blue;">
            string</span> senderId, <span style="color: blue;">string</span> receiverId)<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>{<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>XmlDocument document = <span style="color: blue;">this</span>.startNewXmlDocument();<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>CompanyInfo sender = _source.FetchCompanyInfo(senderId);<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>CompanyInfo receiver = _source.FetchCompanyInfo(receiverId);<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: blue;">this</span>.createSenderNode(sender, 
            document);<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: blue;">this</span>.createReceiverNode(receiver, 
            document);<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: green;">// Do a lot of other stuff<o:p></o:p></span></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; color: green; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: blue;">return</span> document;<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>}<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: blue;">private</span> <span style="color: blue;">void</span> 
            deepInTheBowelsOfTheClass(<span style="color: blue;">string</span> key)<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>{<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: blue;">string</span> something = 
            DataSourceSingleton.Instance.LookupValue(key);<span style=""> </span><o:p></o:p>
            </span>
        </p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: green;">// do something with &quot;something&quot;<o:p></o:p></span></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>}<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; color: blue; font-family: 'Courier New';">
            <span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>[OTHER METHODS]<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>}<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
            </div>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            &nbsp;</p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            And the test fixture looks a bit like this:</p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            &nbsp;</p>
            <div class="code-sample">
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <o:p>&nbsp;</o:p></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>[TestFixture]<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: blue;">public</span> <span style="color: blue;">class</span> 
            Translator1TestFixture<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>{<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>[Test]<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: blue;">public</span> <span style="color: blue;">void</span> 
            WriteTheSenderNode()<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>{<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: green;">// The sender and receiver data is assumed to 
            be in the database -- somewhere<o:p></o:p></span></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>Translator1 translator = <span style="color: blue;">new</span> 
            Translator1();<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: blue;">byte</span>[] contents =
            <span style="color: blue;">this</span>.readFlatFile();<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>XmlDocument document = translator.TranslateFlatFile(contents, &quot;ID00001&quot;, 
            &quot;ID00210&quot;);<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>XmlNode senderNode = document.DocumentElement.SelectSingleNode(&quot;Sender&quot;);<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>Assert.AreEqual(&quot;<st1:city w:st="on"><st1:place w:st="on">Austin</st1:place></st1:city>&quot;, 
            senderNode[&quot;City&quot;].InnerText);<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>}<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: blue;">private</span> <span style="color: blue;">byte</span>[] 
            readFlatFile()…<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>}</span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <o:p>&nbsp;</o:p></p>
            
</div>
            
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            &nbsp;</p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            So what’s so terribly wrong with this code?<span style="">&nbsp; </span>From my 
            standpoint there are several problems.</p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <o:p>&nbsp;</o:p></p>
        <ul style="margin-top: 0in;" type="disc">
            <li class="MsoNormal" style="margin: 0in 0in 0pt;"><b style="">Setting up the tests</b>.<span 
                    style="">&nbsp; </span>The unit tests cannot function today without known data 
                being previously setup in the database external to the TestFixture.<span 
                    style="">&nbsp; </span>When you do write tests against a live database you’re 
                forced into a “least evil” decision.<span style="">&nbsp; </span>One of the things I 
                talked about in an
                <a href="http://codebetter.com/blogs/jeremy.miller/archive/2005/07/20/129552.aspx" 
                    mce_href="http://codebetter.com/blogs/jeremy.miller/archive/2005/07/20/129552.aspx">
                earlier post</a> was the desire for tests to reveal the intention of the code.<span 
                    style="">&nbsp; </span>One of the best ways to do this is to make sure that the 
                test is largely self-contained.<span style="">&nbsp; </span>In this case the data 
                assumed to be inserted into the database prior to the test running.<span 
                    style="">&nbsp; </span>One way we can make this test self-contained is to do the 
                database data setup inside the TestFixture class itself.<span style="">&nbsp; </span>
                That’s okay with small chunks of data, but it doesn’t scale very well.<span 
                    style="">&nbsp; </span></li>
            <li class="MsoNormal" style="margin: 0in 0in 0pt;"><b style="">The tests are not 
                isolated</b>.<span style="">&nbsp; </span>The tests break if other tests overwrite 
                the data in the database.<span style="">&nbsp; </span>Life is happier by far when 
                each test is truly isolated and order-independent.<span style="">&nbsp; </span>The 
                dependency on the singleton in the <span style="font-family: 'Courier New';">
                Translator1</span> class certainly doesn’t help either.<span style="">&nbsp; </span>
                I’m fighting with a set of tests today that are not isolated.<span style="">&nbsp;
                </span>They exhibit some interesting behavior like running successfully one at a 
                time but failing occasionally when they’re run with other tests.<span style="">&nbsp;
                </span>I’m not happy. </li>
            <li class="MsoNormal" style="margin: 0in 0in 0pt;"><b style="">Debugging the unit 
                tests</b>.<span style="">&nbsp; </span>Look at the
                <span style="font-family: 'Courier New';">WriteTheSenderNode</span> test method.<span 
                    style="">&nbsp; </span>There is an assertion that checks that the “City” node has 
                a value of “<st1:city w:st="on"><st1:place w:st="on">Austin</st1:place></st1:city>.”<span 
                    style="">&nbsp; </span>Just looking at the test code you won’t be able to see 
                where this value comes from.<span style="">&nbsp; </span>It’s not clear from the test 
                code why the value of the xml node is supposed to be “<st1:place w:st="on"><st1:city w:st="on">Austin</st1:city></st1:place>.”<span 
                    style="">&nbsp; </span>You can partially beat this problem with comments in the 
                assertions, but that’s not enough in my book.<span style="">&nbsp; </span>Comments 
                are often a crutch for obfuscated code and this isn’t an exception.<span 
                    style="">&nbsp; </span>Another thing to keep in mind is that granular tests are 
                easier to debug than coarse tests.<span style="">&nbsp; </span>This code today only 
                has integrated tests without any unit tests. </li>
            <li class="MsoNormal" style="margin: 0in 0in 0pt;"><b style="">Test execution time</b>.<span 
                    style="">&nbsp; </span>Tests that run against the database are slower than tests 
                that run completely inside one process.<span style="">&nbsp; </span>I’m writing this 
                post while I wait for some <b style="">very</b> slow integrated tests to run.<span 
                    style="">&nbsp; </span>Slow tests are a form of inefficiency.<span style="">&nbsp;
                </span>I really want to test the translation code here, not the data access.<span 
                    style="">&nbsp; </span>If I can isolate the translation functionality away from 
                the database structure, I can make the tests faster. </li>
            <li class="MsoNormal" style="margin: 0in 0in 0pt;"><b style="">Reuse the code</b>.<span 
                    style="">&nbsp; </span>As I’ve stated before, it would be very advantageous to 
                reuse this translation code.<span style="">&nbsp; </span>Today this is difficult 
                because of the tight coupling to other classes.<span style="">&nbsp; </span>The 
                dependency on the specific data access class is easily remedied by a little 
                “constructor injection,” but there is still the dependency on the singleton 
                buried deep inside the class.<span style="">&nbsp; </span>To use the translation code 
                I have to bring with me everything that damn singleton needs too.<span style="">&nbsp;
                </span>Moreover, it’s not going to be obvious to someone else attempting to use 
                the translation code what they need without tracing deep into the translation to 
                figure out the external dependencies of the singleton.<span style="">&nbsp; </span>
                <a href="http://codebetter.com/blogs/jeremy.miller/archive/2005/08/04/130302.aspx" 
                    mce_href="http://codebetter.com/blogs/jeremy.miller/archive/2005/08/04/130302.aspx">
                Singleton == testing pain</a>.<span style="">&nbsp; </span>I haven’t done enough 
                research into the singleton usage, but one way or another we’ll remove the 
                dependency on the singleton.</li>
        </ul>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <o:p>&nbsp;</o:p></p>
        <h2>Refactoring to Inversion of Control</h2>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <o:p>&nbsp;</o:p></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            My thought on the translation code is to apply Inversion of Control to the 
            translation code to remove the database dependency.<span style="">&nbsp; </span>
            Let some other class be responsible for running out and fetching the receiver 
            and sender information and “push” it into the translator.<span style="">&nbsp;
            </span>I could have abstracted the data source class as an interface and used 
            Constructor Injection to push alternative classes or mocks into the Translator2 
            class.<span style="">&nbsp; </span>My thinking in this case is to simplify both 
            the reuse of the translation code and eliminate the mocking overhead (~70 
            automated tests) by eliminating the interaction with a data source class 
            altogether.</p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <o:p>&nbsp;</o:p></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            The code below is a skeleton of the approach I’m going to take to refactor our 
            translation code (someday).<span style="">&nbsp; </span>Here’s how I think the 
            new code stacks up to the old code.</p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <o:p>&nbsp;</o:p></p>
        <ul style="margin-top: 0in;" type="disc">
            <li class="MsoNormal" style="margin: 0in 0in 0pt;"><b style="">Setting up the tests</b>.<span 
                    style="">&nbsp; </span>The input data is created within the test itself because 
                the inputs are just objects.<span style="">&nbsp; </span>Don’t ever discount the 
                value of Intellisense in creating test data.<span style="">&nbsp; </span>Working with 
                SQL statements or DataSet’s is laborious and error prone. </li>
            <li class="MsoNormal" style="margin: 0in 0in 0pt;"><b style="">The tests are 
                isolated.</b><span style="">&nbsp; </span>The translation code no longer depends on 
                any kind of external or shared data inside the tests. </li>
            <li class="MsoNormal" style="margin: 0in 0in 0pt;"><b style="">Debugging.</b><span 
                    style="">&nbsp; </span>The tests are somewhat easier to debug because the tests 
                are self-contained.<span style="">&nbsp; </span>Debugging one of these tests if they 
                break is simpler because you don’t have to keep “ALT-Tabbing” between the 
                database window and the code.<span style="">&nbsp; </span>I’d also argue that the 
                test code is much more intention revealing. </li>
            <li class="MsoNormal" style="margin: 0in 0in 0pt;"><b style="">Test execution time</b>.<span 
                    style="">&nbsp; </span>These tests will run faster because the external network 
                hops to the database are eliminated.<span style="">&nbsp; </span>Don’t underestimate 
                the importance of fast tests. </li>
            <li class="MsoNormal" style="margin: 0in 0in 0pt;"><b style="">Code reuse</b>.<span 
                    style="">&nbsp; </span>I can now reuse the translation code more easily in other 
                contexts.<span style="">&nbsp; </span>I don’t have to have any special database 
                structure or external configuration anymore to use the translation code.</li>
        </ul>
        
        <div class="code-sample">
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <o:p>&nbsp;</o:p></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: blue;">public</span> <span style="color: blue;">class</span> 
            Translator2<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>{<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: blue;">public</span> Translator2()<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>{<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>}<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: blue;">public</span> XmlDocument TranslateFlatFile(<span 
                style="color: blue;">byte</span>[] contents, CompanyInfo sender, CompanyInfo 
            receiver )<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>{<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>XmlDocument document = <span style="color: blue;">this</span>.startNewXmlDocument();<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: blue;">this</span>.createSenderNode(sender, 
            document);<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: blue;">this</span>.createReceiverNode(receiver, 
            document);<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: green;">// Do a lot of other stuff<o:p></o:p></span></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; color: green; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: blue;">return</span> document;<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>}<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; color: blue; font-family: 'Courier New';">
            <span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>#region</span><span style="font-size: 10pt; font-family: 'Courier New';"> 
            other methods<span style="color: blue;">…<o:p></o:p></span></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>}<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>[TestFixture]<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: blue;">public</span> <span style="color: blue;">class</span> 
            Translator2TestFixture<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>{<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>[Test]<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: blue;">public</span> <span style="color: blue;">void</span> 
            WriteTheSenderNode()<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>{<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>CompanyInfo sender = <span style="color: blue;">new</span> CompanyInfo();<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>sender.City = &quot;<st1:city w:st="on"><st1:place w:st="on">Austin</st1:place></st1:city>&quot;;<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: green;">// set other sender properties<o:p></o:p></span></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; color: green; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>CompanyInfo receiver = <span style="color: blue;">new</span> 
            CompanyInfo();<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: green;">// set receiver properties<o:p></o:p></span></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; color: green; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: blue;">byte</span>[] contents =
            <span style="color: blue;">this</span>.readFlatFile();<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>Translator2 translator = <span style="color: blue;">new</span> 
            Translator2();<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>XmlDocument document = translator.TranslateFlatFile(contents, sender, 
            receiver);<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>XmlNode senderNode = document.DocumentElement.SelectSingleNode(&quot;Sender&quot;);<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>Assert.AreEqual(sender.City, senderNode[&quot;City&quot;].InnerText);<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>}<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: blue;">private</span> <span style="color: blue;">byte</span>[] 
            readFlatFile()…<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>}</span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <o:p>&nbsp;</o:p></p>
            
            </div>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            &nbsp;</p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            All I’ve really done is move the responsibility for fetching data out of the 
            database into another class.<span style="">&nbsp; </span>It’s a small change but 
            it had a positive impact on both the code and the testing.<span style="">&nbsp;
            </span>If you think about it, you could actually say that software design boils 
            down to “Where should this code go?”<span style="">&nbsp; </span>I think there’s 
            a watershed moment in every developer’s career when they start look more at 
            their code as a structure and less as a bag of statements.<span style="">&nbsp;
            </span>
        </p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <o:p>&nbsp;</o:p></p>
        <h2>Other Examples</h2>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <b style=""><o:p>&nbsp;</o:p></b></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            We’re taught that the key to safe lifting is “<a 
                href="http://northonline.northseattle.edu/backcare/tutorials/slide9.html" 
                mce_href="http://northonline.northseattle.edu/backcare/tutorials/slide9.html">push, 
            don’t pull</a>.” <span style="">&nbsp;</span>I like to think of Inversion of Control 
            as applying this mantra to code.<span style="">&nbsp; </span>IoC is fairly 
            common, and much more so with Test Driven Development practices.<span style="">&nbsp;
            </span>Here are some other examples of IoC you might run into.</p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <o:p>&nbsp;</o:p></p>
        <ul style="margin-top: 0in;" type="disc">
            <li class="MsoNormal" style="margin: 0in 0in 0pt;">The
                <a href="http://martinfowler.com/eaaCatalog/dataMapper.html" 
                    mce_href="http://martinfowler.com/eaaCatalog/dataMapper.html">Data Mapper</a> 
                pattern is the central concept in many Object/Relational Mapping tools.<span 
                    style="">&nbsp; </span>Using an external mapper class to handle persistence 
                duties for a business domain class has several advantages.<span style="">&nbsp;
                </span>The domain classes can become simpler because they’re no longer 
                interacting with any kind of data class.<span style="">&nbsp; </span>You can also 
                insulate the business domain from the database structure and vice versa.<span 
                    style="">&nbsp; </span>Testing the business logic can be much simpler with a
                <a href="http://martinfowler.com/eaaCatalog/domainModel.html" 
                    mce_href="http://martinfowler.com/eaaCatalog/domainModel.html">domain model</a>.<span 
                    style="">&nbsp; </span>My company’s main application today relies on far too many 
                T-SQL stored procedures.<span style="">&nbsp; </span>Some of our multi-billion dollar 
                clients seem to think they have the right to run our application on Oracle 
                instead.<span style="">&nbsp; </span>We’re eventually going to arrange our business 
                logic along domain model principles and take advantage of an O/R mapping tool 
                for multi-database support. </li>
            <li class="MsoNormal" style="margin: 0in 0in 0pt;">
                <a href="http://martinfowler.com/eaaDev/ModelViewPresenter.html" 
                    mce_href="http://martinfowler.com/eaaDev/ModelViewPresenter.html">Model View 
                Presenter</a> (MVP) might not be a true example of IoC, but it’s similar in 
                philosophy.<span style="">&nbsp; </span>When you use the MVP you make the “view” 
                classes completely passive.<span style="">&nbsp; </span>Instead of the view making 
                requests to the controller, the controller tells the view what to do.<span 
                    style="">&nbsp; </span>MVP is the best mechanism that I know for doing TDD with 
                user interface clients. </li>
            <li class="MsoNormal" style="margin: 0in 0in 0pt;">A side effect of using Dependency 
                Injection for configuration is that your classes are no longer dependent on any 
                kind of external configuration file (or God forbid, the registry).<span 
                    style="">&nbsp; </span>Here’s a simple example of “push” configuration.<span 
                    style="">&nbsp; </span>The <span style="font-family: 'Courier New';">PushClass</span> 
                will be constructed by some kind of Builder class that reads the configuration 
                and returns a PushClass object.<span style="">&nbsp; </span>I’m a huge fan of this 
                technique after a couple of projects now.</li>
        </ul>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <o:p>&nbsp;</o:p></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: blue;">public</span> <span style="color: blue;">class</span> 
            PullClass<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>{<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: blue;">private</span> <span style="color: blue;">int</span> 
            _threshold;<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: blue;">public</span> PullClass()<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>{<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>_threshold = <span style="color: blue;">int</span>.Parse(System.Configuration.ConfigurationSettings.AppSettings[&quot;Threshold&quot;]);<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>}<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>}<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: blue;">public</span> <span style="color: blue;">class</span> 
            PushClass<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>{<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: blue;">private</span> <span style="color: blue;">
            readonly</span> <span style="color: blue;">int</span> _threshold;<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><o:p>&nbsp;</o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span><span style="color: blue;">public</span> PushClass(<span 
                style="color: blue;">int</span> threshold)<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>{<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>_threshold = threshold;<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>}<o:p></o:p></span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <span style="font-size: 10pt; font-family: 'Courier New';"><span style="">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            </span>}</span></p>
        <p class="MsoNormal" style="margin: 0in 0in 0pt;">
            <o:p>&nbsp;</o:p></p>
        <ul style="margin-top: 0in;" type="disc">
            <li class="MsoNormal" style="margin: 0in 0in 0pt;">If you look at the example user 
                story from my article on
                <a href="http://codebetter.com/blogs/jeremy.miller/articles/131726.aspx" 
                    mce_href="http://codebetter.com/blogs/jeremy.miller/articles/131726.aspx">
                Assigning Responsibilities</a>, I used IoC to isolate the functionality for 
                creating HTML from an Invoice so that this functionality could be tested without 
                a lot of interaction with other classes.</li>
        </ul>
        	
	</body>
</html>